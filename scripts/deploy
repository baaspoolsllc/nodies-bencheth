#!/usr/bin/env python3
import getpass
import os
import subprocess
import threading
import urllib.parse
from time import sleep

# Check if SSH_KEY is set
SSH_KEY = os.environ.get("SSH_KEY")
if not SSH_KEY:
    print("❌ SSH_KEY is not set")
    exit(1)

# Get project root
project_root = (
    subprocess.check_output(["git", "rev-parse", "--show-toplevel"]).strip().decode()
)


def read_dotenv(name):
    with open(os.path.join(project_root, ".env"), "r") as f:
        for line in f:
            if name in line and "#" not in line:
                idx = line.index("=")
                return line[idx + 1 :].strip()
    raise Exception(f"❌ {name} is not set in .env file")


LOKI_URL = read_dotenv("LOKI_URL")
GRAFANA_URL = read_dotenv("GRAFANA_URL")
GRAFANA_USERNAME = read_dotenv("GRAFANA_USERNAME")
GRAFANA_PASSWORD = read_dotenv("GRAFANA_PASSWORD")

regions = [
    "us-east",
    "ap-south",
    "eu-central",
]

# regions = [
#     'ap-west',
#     'ca-central',
#     'ap-southeast',
#     'us-central',
#     'us-west',
#     'us-southeast',
#     'us-east',
#     'eu-west',
#     'ap-south',
#     'eu-central',
#     'ap-northeast',
# ]

if not regions:
    print("❌ No regions found")
    exit(1)

# Read RPCs from rpcs.txt file
with open(os.path.join(project_root, "rpcs.txt"), "r") as f:
    rpcs = [line.strip() for line in f]

# Check if RPCs are set
if not rpcs:
    print("❌ RPCs are not set in rpcs.txt file")
    exit(1)

# Ensure linode user is set up
for line in (
    subprocess.check_output(["linode-cli", "show-users"]).strip().decode().splitlines()
):
    if "*" in line:
        linode_user = line.split()[1]
        print("👍 linode user is set: " + linode_user)
        break

if not linode_user:
    print("❌ linode user is not set up. please run linode-cli configure")
    exit(1)

# share amongst threads
root_password = None


def linode_ip(linode):
    for line in (
        subprocess.check_output(["linode-cli", "linodes", "list", "--label", linode])
        .decode()
        .strip()
        .splitlines()
    ):
        if linode in line:
            return line.split()[-2]


def linode_name(host, region):
    return f"bencheth-{host}-{region}"


def deploy(rpc, region):
    hostname = rpc_hostname(rpc)
    linode = linode_name(hostname, region)
    ip = linode_ip(linode)

    print(f"🤠 Deploying to {region} {hostname}")

    if ip:
        print(f"⏩ linode {region} IP: {ip} already exists, skipping creation")
    else:
        print(f"⏩ Creating linode {region} {hostname}")
        subprocess.run(
            [
                "linode-cli",
                "linodes",
                "create",
                "--no-defaults",  # no surprises
                "--image",
                "linode/ubuntu22.04",
                "--region",
                region,
                "--type",
                "g6-dedicated-2",
                "--label",
                linode,
                "--root_pass",
                root_password,
                "--authorized_users",
                linode_user,
                "--booted",
                "true",
                "--backups_enabled",
                "false",
                "--private_ip",
                "false",
                "--stackscript_id",
                "607433",  # docker
                "--stackscript_data",
                '{"disable_root": "No","mx":"No","spf":"No"}',
            ]
        )
        sleep(5)  # stagger creation
        ip = linode_ip(linode)

    print(f"🛜  linode {linode} {hostname} IP: {ip}")

    # wait for linode to be ready
    output = subprocess.run(
        ["telnet", ip, "22"], stdout=subprocess.PIPE, input="quit".encode()
    ).stdout.decode()
    while "Connected" not in output:
        print(f"⏳ linode {linode} IP: {ip} Waiting for linode to be ready")
        sleep(30)
        output = subprocess.run(
            ["telnet", ip, "22"], stdout=subprocess.PIPE, input="quit".encode()
        ).stdout.decode()

    # rsync deploy
    subprocess.run(
        [
            "rsync",
            "-avz",
            "-e",
            f"ssh -i {SSH_KEY} -o StrictHostKeyChecking=no",
            "--exclude-from",
            os.path.join(project_root, "scripts/deployexclude"),
            project_root + "/",
            f"root@{ip}:/root/bencheth",
        ]
    )

    print(f"🚀 Deploying {region} {hostname} to {ip}")

    # run deploy script
    deploy_script = f"""cd /root/bencheth
sudo hostnamectl set-hostname {linode}
for i in $(seq 1 30); do
    docker ps >/dev/null 2>&1 && break
    echo "⏳ Waiting for docker to be ready"
    sleep 10
done
sudo systemctl restart docker # just to be sure
# set .env file
echo RPC_URL="{rpc}" > .env
echo RUST_LOG="debug" >> .env
echo LOKI_URL={LOKI_URL} >> .env
echo GRAFANA_URL={GRAFANA_URL} >> .env
echo GRAFANA_USERNAME={GRAFANA_USERNAME} >> .env
echo GRAFANA_PASSWORD={GRAFANA_PASSWORD} >> .env
docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions || true
sudo ufw allow 9100 # node exporter
docker-compose stop
docker-compose up --build -d"""
    subprocess.run(
        ["ssh", "-i", SSH_KEY, "-o", "StrictHostKeyChecking=no", f"root@{ip}"],
        input=deploy_script.encode(),
    )

    print(f"✅ Deployed {region} {hostname} to {ip}")


def rpc_hostname(rpc):
    return urllib.parse.urlparse(rpc).hostname.replace(".", "-")


print(
    f"""
🏋️‍♂️ Deploying BenchETH:
    rpcs: [{','.join([rpc_hostname(rpc) for rpc in rpcs])}]
    regions: [{','.join(regions)}]
    """
)

input("➡️ Press enter to continue or Ctrl+C to cancel")
root_password = getpass.getpass(f"🔑 Set root password for new linodes: ")

# Deploy to all regions
threads = []
for rpc in rpcs:
    for region in regions:
        thr = threading.Thread(
            target=deploy,
            args=(
                rpc,
                region,
            ),
        )
        thr.start()
        sleep(5)  # stagger deploys
        threads.append(thr)

for thread in threads:
    thread.join()

print("🎉 All deployments complete")
